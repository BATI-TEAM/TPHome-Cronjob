const { chromium } = require('playwright');
const H = require('./helpers');

let isRunning = false;

const keywords = [
  'g·∫°ch ·ªëp l√°t gi√° r·∫ª',
  'gi√° g·∫°ch ·ªëp l√°t tphome',
  'tphome gi√° g·∫°ch',
  'gia gach tphome',
  'gi√° g·∫°ch 40x40',
];

async function handleTphomevnPage(activePage, startUrl) {
  console.log(`üåê T·ªõi tphomevn: ${startUrl}`);

  if (!activePage.url().includes('tphomevn.com/gia-gach-op-lat')) {
    try {
      activePage = await H.clickLinkByUrl(activePage, startUrl, []);
    } catch (err) {
      console.error(`‚ö† L·ªói khi truy c·∫≠p ${startUrl}:`, err.message);
      return activePage; // Ti·∫øp t·ª•c v·ªõi trang hi·ªán t·∫°i n·∫øu ƒëi·ªÅu h∆∞·ªõng th·∫•t b·∫°i
    }
  }
  console.log(`‚úÖ ƒêang ·ªü: ${activePage.url()}`);

  console.log('‚è≥ ƒê·ª£i 20s trong trang tphomevn...');
  await H.sleep(activePage, 20000);

  // Theo d√µi c√°c li√™n k·∫øt ƒë√£ truy c·∫≠p
  const visitedLinks = new Set([startUrl]);
  let currentPage = activePage;
  const maxClicks = 3 + Math.floor(Math.random() * 2); // Click ng·∫´u nhi√™n 3-5 li√™n k·∫øt

  try {
    // Thu th·∫≠p c√°c li√™n k·∫øt n·ªôi b·ªô t·ª´ trang hi·ªán t·∫°i
    const internalLinks = await H.getInternalTphomevnLinks(currentPage, 'https://tphomevn.com');
    // L·ªçc ra c√°c li√™n k·∫øt m·ªõi (ch∆∞a truy c·∫≠p)
    const newLinks = internalLinks.filter(link => !visitedLinks.has(link));

    if (newLinks.length > 0) {
      console.log(`üéØ S·∫Ω click ${maxClicks} link ng·∫´u nhi√™n trong site`);

      for (let i = 0; i < maxClicks && newLinks.length > 0; i++) {
        try {
          // Ch·ªçn ng·∫´u nhi√™n m·ªôt li√™n k·∫øt m·ªõi
          const randomIndex = Math.floor(Math.random() * newLinks.length);
          const chosenLink = newLinks[randomIndex];
          visitedLinks.add(chosenLink);
          newLinks.splice(randomIndex, 1); // X√≥a li√™n k·∫øt ƒë√£ ch·ªçn ƒë·ªÉ tr√°nh l·∫∑p

          console.log(`üîó Click ${i + 1}/${maxClicks} (ng·∫´u nhi√™n): ${chosenLink}`);
          currentPage = await H.clickLinkByUrl(currentPage, chosenLink, [], 15000);
          console.log(`üåç ƒê√£ v√†o: ${currentPage.url()}`);

          // Delay ng·∫´u nhi√™n ƒë·ªÉ m√¥ ph·ªèng h√†nh vi ng∆∞·ªùi d√πng
          const delay = 15000 + Math.floor(Math.random() * 5000);
          console.log(`‚è≥ ƒê·ª£i ${Math.round(delay / 1000)}s trong trang con...`);
          await H.sleep(currentPage, delay);
          await H.humanize(currentPage);
        } catch (err) {
          console.error(`‚ö† L·ªói khi click li√™n k·∫øt ${i + 1}:`, err.message);
          continue;
        }
      }
    } else {
      console.log('‚ö† Kh√¥ng t√¨m th·∫•y link n·ªôi b·ªô h·ª£p l·ªá sau khi l·ªçc.');
    }
  } catch (err) {
    console.error('‚ö† L·ªói khi l·∫•y internal links:', err.message);
  }

  console.log(`‚úÖ ƒê√£ ho√†n t·∫•t crawl, t·ªïng c·ªông ${visitedLinks.size} li√™n k·∫øt ƒë√£ truy c·∫≠p:`);
  visitedLinks.forEach((link, index) => {
    console.log(`  ${index + 1}. ${link}`);
  });

  return currentPage;
}

async function runGoogleSearchAndNavigate() {
  if (isRunning) {
    console.log('M·ªôt ti·∫øn tr√¨nh ƒëang ch·∫°y, b·ªè qua.');
    return;
  }
  isRunning = true;

  let browser;
  try {
    // Kh·ªüi ch·∫°y tr√¨nh duy·ªát v·ªõi x·ª≠ l√Ω l·ªói HTTPS
    browser = await chromium.launch({
      headless: false,
      ignoreHTTPSErrors: true // B·ªè qua l·ªói ch·ª©ng ch·ªâ SSL
    });
    const context = await browser.newContext({
      ignoreHTTPSErrors: true,
      userAgent: H.getRandomUserAgent ? H.getRandomUserAgent() : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36'
    });
    let page = await context.newPage();

    let keywordIndex = 0;
    let backoff = 30000; // 30s khi b·ªã block
    const maxAttemptsPerKeyword = 3; // Gi·ªõi h·∫°n s·ªë l·∫ßn th·ª≠ l·∫°i cho m·ªói t·ª´ kh√≥a

    while (true) {
      const keyword = keywords[keywordIndex];
      console.log(`\nüîç T√¨m v·ªõi t·ª´ kh√≥a: "${keyword}" (index ${keywordIndex})`);

      let attempt = 0;
      let found = false;

      while (attempt < maxAttemptsPerKeyword && !found) {
        try {
          // ƒêi·ªÅu h∆∞·ªõng t·ªõi Google
          await page.goto('https://www.google.com', { waitUntil: 'domcontentloaded', timeout: 30000 });

          // X·ª≠ l√Ω Google Consent n·∫øu c√≥
          await H.handleGoogleConsent(page).catch(() => {});

          // ƒêi·ªÅn √¥ t√¨m ki·∫øm
          const filled = await H.fillGoogleSearchBox(page, keyword);
          if (!filled) {
            console.log('‚ö† Kh√¥ng ƒëi·ªÅn ƒë∆∞·ª£c √¥ t√¨m ki·∫øm. Th·ª≠ l·∫°i.');
            attempt++;
            await page.waitForTimeout(5000);
            continue;
          }

          // G·ª≠i t√¨m ki·∫øm
          await Promise.all([
            page.keyboard.press('Enter'),
            page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 10000 }).catch(() => {})
          ]);

          // M√¥ ph·ªèng h√†nh vi ng∆∞·ªùi d√πng
          await H.humanize(page);

          // Ki·ªÉm tra ch·∫∑n c·ªßa Google
          if (await H.checkGoogleBlock(page)) {
            console.log(`üö® Google block (captcha / sorry page) -> ƒë·ª£i ${backoff / 1000}s r·ªìi th·ª≠ l·∫°i...`);
            backoff = Math.min(backoff * 2, 120000); // Exponential backoff, max 2 ph√∫t
            await page.waitForTimeout(backoff);
            attempt++;
            continue;
          }

          let pageNumber = 1;

          while (!found) {
            // Ch·ªù k·∫øt qu·∫£ t√¨m ki·∫øm t·∫£i
            await page.waitForSelector('div#search', { timeout: 10000 }).catch(() => {});
            const resultLinks = await page
              .locator('div#search a:has(h3):not([href*="aclk"]):not([href*="googleadservices"])')
              .all();

            for (let i = 0; i < resultLinks.length; i++) {
              const href = await resultLinks[i].getAttribute('href').catch(() => null);
              if (href && href.includes('tphomevn.com')) {
                const position = i + 1 + (pageNumber - 1) * 10;
                console.log(`üéâ T√¨m th·∫•y t·ª´ kh√≥a: "${keyword}" c·ªßa tphomevn.com ·ªü v·ªã tr√≠ th·ª© ${position} (trang ${pageNumber})`);
                const { page: sitePage, isPopup } = await H.safeClick(page, resultLinks[i], 15000);
                console.log(`üëâ ƒê√£ m·ªü k·∫øt qu·∫£: ${sitePage.url()}`);

                // X·ª≠ l√Ω trang tphomevn.com
                page = await handleTphomevnPage(sitePage, sitePage.url());

                if (isPopup) await sitePage.close().catch(() => {});
                found = true;
                break;
              }
            }

            if (!found) {
              const nextBtn = H.getNextButtonLocator(page);
              if (await nextBtn.count()) {
                console.log('üëâ Sang trang k·∫øt qu·∫£ k·∫ø ti·∫øp...');
                pageNumber++;
                await Promise.all([
                  nextBtn.click(),
                  page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 15000 }).catch(() => {})
                ]);
                await page.waitForTimeout(2000);
                await H.humanize(page);

                if (await H.checkGoogleBlock(page)) {
                  console.log(`üö® Google block (captcha / sorry page) -> ƒë·ª£i ${backoff / 1000}s r·ªìi th·ª≠ l·∫°i...`);
                  backoff = Math.min(backoff * 2, 120000);
                  await page.waitForTimeout(backoff);
                  break;
                }
              } else {
                console.log(`‚ö†Ô∏è H·∫øt trang t√¨m ki·∫øm (ƒë√£ ki·ªÉm tra ${pageNumber} trang) m√† kh√¥ng th·∫•y tphomevn.com.`);
                break;
              }
            }
          }

          if (!found) {
            console.log(`‚ö† Kh√¥ng t√¨m th·∫•y tphomevn.com cho t·ª´ kh√≥a "${keyword}" sau ${maxAttemptsPerKeyword} l·∫ßn th·ª≠.`);
          }
        } catch (err) {
          console.error(`‚ö† L·ªói khi x·ª≠ l√Ω t·ª´ kh√≥a "${keyword}" (l·∫ßn ${attempt + 1}):`, err.message);
          attempt++;
          backoff = Math.min(backoff * 2, 120000); // TƒÉng th·ªùi gian ch·ªù n·∫øu l·ªói
          await page.waitForTimeout(5000);
        }
      }

      keywordIndex = (keywordIndex + 1) % keywords.length;
      console.log('üîÑ Chuy·ªÉn sang t·ª´ kh√≥a ti·∫øp theo...');
      backoff = 30000; // ƒê·∫∑t l·∫°i backoff cho t·ª´ kh√≥a ti·∫øp theo
      await page.waitForTimeout(2000);
    }
  } catch (err) {
    console.error('üí• L·ªói nghi√™m tr·ªçng (ngo√†i v√≤ng):', err);
  } finally {
    if (browser) await browser.close().catch(() => {});
    isRunning = false;
  }
}

runGoogleSearchAndNavigate();
