// Helpers d√πng chung cho c√°c script Playwright
// Ng√¥n ng·ªØ: Vietnamese comments

/**
 * L·∫•y to√†n b·ªô hrefs theo selector m·ªôt c√°ch an to√†n, c√≥ retry v√† gi·∫£i m√£ redirect c·ªßa Google.
 * @param {import('playwright').Page} page
 * @param {string} selector CSS selector, v√≠ d·ª• 'a[href]'
 * @param {number} retries s·ªë l·∫ßn th·ª≠ l·∫°i khi l·ªói t·∫°m th·ªùi
 * @returns {Promise<string[]>}
 */
async function safeGetHrefs(page, selector = 'a[href]', retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      await page.waitForSelector(selector, { timeout: 4000 }).catch(() => {});
      const locators = await page.locator(selector).all();
      const hrefs = [];
      for (const loc of locators) {
        try {
          let href = await loc.getAttribute('href');
          if (!href) continue;
          // Gi·∫£i m√£ redirect c·ªßa Google
          if (href.startsWith('/url?') || href.includes('/url?q=')) {
            try {
              const u = new URL(href, 'https://www.google.com');
              const q = u.searchParams.get('q');
              if (q) href = q;
            } catch {}
          }
          hrefs.push(href);
        } catch {}
      }
      return [...new Set(hrefs)];
    } catch (err) {
      if (attempt < retries) {
        await page.waitForTimeout(800);
        continue;
      } else {
        throw err;
      }
    }
  }
  return [];
}

/**
 * Click an to√†n: h·ªó tr·ª£ popup (target=_blank) v√† ƒëi·ªÅu h∆∞·ªõng trong c√πng tab, c√≥ timeout.
 * Tr·∫£ v·ªÅ { page: Page, isPopup: boolean }
 * @param {import('playwright').Page} page
 * @param {import('playwright').Locator} locator
 * @param {number} timeout
 */
async function safeClick(page, locator, timeout = 15000) {
  try {
    const popupPromise = page.waitForEvent('popup', { timeout }).catch(() => null);
    const navPromise = page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout }).catch(() => null);
    await locator.click({ timeout });
    const popup = await popupPromise;
    await navPromise; // kh√¥ng quan tr·ªçng k·∫øt qu·∫£, ch·ªâ ƒë·ªÉ ch·ªù

    if (popup) {
      await popup.waitForLoadState('domcontentloaded', { timeout }).catch(() => {});
      return { page: popup, isPopup: true };
    }

    await page.waitForLoadState('domcontentloaded', { timeout }).catch(() => {});
    return { page, isPopup: false };
  } catch (e) {
    console.log('‚ö† safeClick error:', e?.message || e);
    return { page, isPopup: false, error: e };
  }
}

/**
 * T√¨m v√† click link theo URL trong trang hi·ªán t·∫°i. N·∫øu kh√¥ng th·∫•y, th·ª≠ theo path/last segment r·ªìi candidates.
 * Cu·ªëi c√πng fallback goto(url).
 * Tr·∫£ v·ªÅ Page (tab ƒëang ho·∫°t ƒë·ªông sau click/goto)
 * @param {import('playwright').Page} page
 * @param {string} url URL m·ª•c ti√™u
 * @param {string[]} candidates Danh s√°ch URL d·ª± ph√≤ng ƒë·ªÉ th·ª≠ click
 * @param {number} timeout
 * @returns {Promise<import('playwright').Page>}
 */
async function clickLinkByUrl(page, url, candidates = [], timeout = 15000) {
  try {
    const u = new URL(url);
    const host = u.hostname;
    const path = u.pathname.replace(/\/+$/, "");
    const lastSeg = path.split('/').filter(Boolean).pop() || '';

    let link = page.locator(`a[href="${url}"]:visible`).first();
    if (!(await link.count())) link = page.locator(`a[href$="${path}"]:visible`).first();
    if (!(await link.count())) {
      link = lastSeg
        ? page.locator(`a[href*="${host}"][href*="${lastSeg}"]:visible`).first()
        : page.locator(`a[href*="${host}"]:visible`).first();
    }

    if (await link.count()) {
      const res = await safeClick(page, link, timeout);
      return res.page;
    }

    for (const candidate of candidates) {
      try {
        let candLink = page.locator(`a[href="${candidate}"]:visible`).first();
        if (!(await candLink.count())) candLink = page.locator(`a[href*="${candidate}"]:visible`).first();
        if (await candLink.count()) {
          console.log(`üëâ Kh√¥ng t√¨m th·∫•y link ${url}, th·ª≠ candidate: ${candidate}`);
          const res = await safeClick(page, candLink, timeout);
          return res.page;
        }
      } catch {}
    }

    console.log(`‚ö† Kh√¥ng t√¨m th·∫•y link h·ª£p l·ªá, fallback goto: ${url}`);
    await page.goto(url, { waitUntil: 'domcontentloaded', timeout }).catch(() => {});
    return page;
  } catch (e) {
    console.log('‚ö† clickLinkByUrl error, fallback goto:', e?.message || e);
    await page.goto(url, { waitUntil: 'domcontentloaded' }).catch(() => {});
    return page;
  }
}

/**
 * L·∫•y to√†n b·ªô link n·ªôi b·ªô theo host hi·ªán t·∫°i, l·ªçc b·ªè mailto/tel/social v√† lo·∫°i baseUrl n·∫øu truy·ªÅn v√†o.
 * @param {import('playwright').Page} page
 * @param {{ baseUrl?: string, includeHost?: string, excludeHosts?: string[] }} options
 * @returns {Promise<string[]>}
 */
async function getInternalLinks(page, options = {}) {
  const { baseUrl, includeHost, excludeHosts = ['facebook.com', 'instagram.com', 'whatsapp:'] } = options;
  const allHrefs = await safeGetHrefs(page, 'a[href]').catch(() => []);
  const result = [];
  const host = includeHost || (() => { try { return new URL(page.url()).hostname; } catch { return ''; } })();

  for (let href of allHrefs) {
    if (!href) continue;
    if (href.startsWith('/')) {
      try { href = new URL(href, page.url()).href; } catch {}
    }
    const isExcluded = href.startsWith('mailto:') || href.startsWith('tel:') || excludeHosts.some(x => href.includes(x));
    if (isExcluded) continue;
    if (host && href.includes(host) && href !== baseUrl) {
      result.push(href);
    }
  }
  return [...new Set(result)];
}

/**
 * L·∫•y link n·ªôi b·ªô cho domain tphomevn.com (gi·ªØ t∆∞∆°ng th√≠ch v·ªõi c√°c script hi·ªán t·∫°i)
 * @param {import('playwright').Page} page
 * @param {string} baseUrl
 * @returns {Promise<string[]>}
 */
async function getInternalTphomevnLinks(page, baseUrl) {
  return getInternalLinks(page, { baseUrl, includeHost: 'tphomevn.com' });
}

/** Random integer [min, max] */
function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/** Random delay milliseconds from seconds range */
function randomDelayMs(minSeconds, maxSeconds) {
  return getRandomInt(minSeconds, maxSeconds) * 1000;
}

/** Sleep ti·ªán l·ª£i d·ª±a tr√™n page.waitForTimeout */
async function sleep(page, ms) {
  await page.waitForTimeout(ms);
}

/** Check Google block (captcha/sorry page) */
function checkGoogleBlock(page) {
  return page.url().includes('/sorry/index');
}

/**
 * ƒêi·ªÅn query v√†o √¥ t√¨m ki·∫øm Google, h·ªó tr·ª£ input v√† textarea.
 * @param {import('playwright').Page} page
 * @param {string} query
 * @returns {Promise<boolean>} true n·∫øu ƒëi·ªÅn th√†nh c√¥ng
 */
async function fillGoogleSearchBox(page, query) {
  try {
    await page.fill('[name="q"]', query);
    return true;
  } catch {
    try {
      await page.fill('textarea[name="q"]', query);
      return true;
    } catch {
      return false;
    }
  }
}

// --- Google handling helpers ---
/**
 * X·ª≠ l√Ω m√†n h√¨nh consent/cookies c·ªßa Google n·∫øu xu·∫•t hi·ªán.
 * @param {import('playwright').Page} page
 * @param {number} timeout
 * @returns {Promise<boolean>} true n·∫øu ƒë√£ b·∫•m ƒë∆∞·ª£c consent
 */
async function handleGoogleConsent(page, timeout = 5000) {
  const selectors = [
    '#L2AGLb',
    'button:has-text("I agree")',
    'button:has-text("Accept all")',
    'button:has-text("T√¥i ƒë·ªìng √Ω")',
    'button:has-text("ƒê·ªìng √Ω t·∫•t c·∫£")',
    'form[action*="consent"] button:has-text("Accept")',
  ];
  for (const sel of selectors) {
    try {
      const btn = page.locator(sel).first();
      if (await btn.count()) {
        await btn.click({ timeout }).catch(() => {});
        await page.waitForLoadState('domcontentloaded', { timeout: 3000 }).catch(() => {});
        return true;
      }
    } catch {}
  }
  return false;
}

/**
 * Ki·ªÉm tra b·ªã Google block (captcha/sorry page) b·∫±ng URL v√† n·ªôi dung trang.
 * @param {import('playwright').Page} page
 */
async function isGoogleBlocked(page) {
  const url = page.url();
  if (url.includes('/sorry/') || url.includes('/sorry/index')) return true;
  try {
    const html = (await page.content())?.toLowerCase() || '';
    const signals = [
      'unusual traffic', 'ƒë√£ ph√°t hi·ªán l∆∞u l∆∞·ª£ng b·∫•t th∆∞·ªùng',
      'our systems have detected',
      'to continue, please type the characters',
      'enable javascript'
    ];
    return signals.some(s => html.includes(s));
  } catch {
    return false;
  }
}

/**
 * T·∫°o URL t√¨m ki·∫øm Google ·ªïn ƒë·ªãnh theo ng√¥n ng·ªØ/khu v·ª±c.
 */
function googleSearchUrl(query, { hl = 'vi', gl = 'VN', num = 10 } = {}) {
  const params = new URLSearchParams({ q: query, hl, gl, num: String(num), pws: '0', safe: 'off' });
  return `https://www.google.com/search?${params.toString()}`;
}

/**
 * L·∫•y locator k·∫øt qu·∫£ organic ƒë·∫ßu ti√™n (b·ªè qu·∫£ng c√°o aclk/googleadservices).
 */
function getOrganicResultLocator(page) {
  return page.locator('div#search a:has(h3):not([href*="aclk"]):not([href*="googleadservices"])').first();
}

/**
 * L·∫•y locator n√∫t Next (ƒëa ng√¥n ng·ªØ).
 */
function getNextButtonLocator(page) {
  return page.locator('#pnnext, a[aria-label="Next"], a[aria-label="Trang ti·∫øp theo"]').first();
}

/**
 * M√¥ ph·ªèng thao t√°c ng∆∞·ªùi d√πng ƒë∆°n gi·∫£n ƒë·ªÉ gi·∫£m d·∫•u v·∫øt bot.
 */
async function humanize(page) {
  try {
    const y = Math.floor(Math.random() * 600) + 200;
    await page.mouse.wheel(0, y);
    await page.waitForTimeout(400 + Math.random() * 900);
  } catch {}
}

module.exports = {
  safeGetHrefs,
  safeClick,
  clickLinkByUrl,
  getInternalLinks,
  getInternalTphomevnLinks,
  getRandomInt,
  randomDelayMs,
  sleep,
  checkGoogleBlock,
  fillGoogleSearchBox,
  handleGoogleConsent,
  isGoogleBlocked,
  googleSearchUrl,
  getOrganicResultLocator,
  getNextButtonLocator,
  humanize,
};
